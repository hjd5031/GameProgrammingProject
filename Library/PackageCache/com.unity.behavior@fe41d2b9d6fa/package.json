{
  "name": "com.unity.behavior",
  "displayName": "Behavior",
  "version": "1.0.9",
  "unity": "6000.0",
  "unityRelease": "16f1",
  "description": "Unity Behavior is a graph-based tool to create and run behavior trees. Besides including a comprehensive library of pre-built nodes, the interface provides node customization options and real-time debugging. While fully functional on its own, a Unity Muse subscription enhances your experience by using large language models (LLM) to generate behavior trees from text prompts and create code for custom action nodes. This subscription, although optional, provides a powerful addition for those looking to accelerate their development process.\n\nA demo showcasing this package can be found in the Asset Store <a href=https://assetstore.unity.com/packages/templates/tutorials/behavior-demo-for-unity-298313>https://assetstore.unity.com/packages/templates/tutorials/behavior-demo-for-unity-298313</a>.",
  "keywords": [
    "behavior",
    "behavior tree",
    "behavior graph",
    "graph",
    "ai",
    "gameplay",
    "NPCs"
  ],
  "dependencies": {
    "com.unity.dt.app-ui": "2.0.0-pre.16",
    "com.unity.modules.unitywebrequest": "1.0.0",
    "com.unity.modules.animation": "1.0.0",
    "com.unity.modules.ai": "1.0.0",
    "com.unity.modules.audio": "1.0.0",
    "com.unity.modules.particlesystem": "1.0.0",
    "com.unity.nuget.newtonsoft-json": "3.2.1",
    "com.unity.burst": "1.7.2",
    "com.unity.collections": "2.1.4"
  },
  "relatedPackages": {
    "com.unity.behavior.tests": "0.0.0"
  },
  "samples": [
    {
      "displayName": "Unity Behavior Example",
      "description": "A simple Behavior example.",
      "path": "Samples~/Example"
    },
    {
      "displayName": "Runtime Serialization",
      "description": "A small example showing how to serialize and deserialize the active state of a behavior tree at runtime.",
      "path": "Samples~/Serialization"
    }
  ],
  "_upm": {
    "changelog": "### Added\n- Add TargetPositionMode to `NavigateToTargetAction` node to define how the target position is determined.\n\n### Changed\n- Added a small offset to duplicated nodes to avoid nodes getting placed on top of each other, when the cursor has not been moved and duplicating by hotkey.\n- Adds SubgraphInfo metadata to graph assets to track version of the dependencies.\n- Icons are back from the dead and they brought friends!\n- Icons will once again show in the Blackboard and Search menus.\n- Changed \"Delete Runtime Asset\" on BehaviorAuthoringGraph asset to \"Regenerate Runtime Asset\".\n\n### Fixed\n- Node execution will no longer be deferred to the next frame. This means an entire graph can fully execute in a single frame if none of its nodes take time to execute. Because this can potentially allow users create an infinite loop using a Repeat node or Start with repeat on, we will now abort a graph and throw an exception if it takes longer than a second to run in a single frame. Note: This abort will not happen if the debugger is currently attached to the process.\n- Added the \"Allow Multiple Repeats Per Tick\" field to Repeat and Start nodes, allowing to toggle between running multiple repeats on the same frame or deferring to the next frame.\n- Nodes that returned `Status.Waiting` can now be woken up on the same frame and may `Update()` multiple times per frame\n- Fixes BlackboardWindow refresh when the target asset is changed and reimported.\n- Fixes infinite import when several graphs are referencing the same graph.\n- Fixes BehaviorGraph AuthoringAssetID not being sync with main asset when main asset is duplicated.\n- Assigning a `BehaviorGraph` to a `BehaviorGraphAgent` prefab will now work correctly and reflect the changes to the prefab.\n- Assigning Blackboard Overrides to a `BehaviorGraphAgent` prefab will now work correctly and reflect the changes to the prefab / prefab instance, allowing to apply them or revert them.\n- Fixed setting `null` / `None` values to Blackboard Variables deriving from `ScriptableObject` onto the `BehaviorGraphAgent`.\n- Setting a Blackboard variable with an object that inherits from the BlackboardVariable stored type.\n- Fixes Self blackboard variable not appearing exposed on `BehaviorGraphAgent` until another variable is added.\n- Fixes BehaviorGraphAgent exception on awake when using a newly created graph or empty graph.\n- Fixes BehaviorGraph (runtime graph asset) references not cleaned up after being deleted.\n- `BehaviorGraphAgent` now handles and throws error when trying to assign an invalid BehaviorGraph from code.\n- Fixes the the behavior graph editor view resetting when certain actions such as undo/redo are performed and entering playmode. (BEHAVB-227)\n- Fixes enum fields and variables not working properly with explicitly ordered enums.\n- Fixes event nodes duplication not preserving the values.\n- Fixes nodes duplication loosing reference to fields assigned to blackboard asset variables.\n\n### Known Issues\n- After much user feedback and investigation, we have determined that runtime serialization is not recommended for use at this time due to an existing limitation in its implementation. Our team is working diligently to address these concerns and bring the feature to the expected quality level in an upcoming release. In the meantime, we appreciate your patience and understanding as we strive to enhance this functionality.\n- An instantiated Prefab with `BehaviorGraphAgent` doesn't show Blackboard Variables overrides as bold and doesn't let you right click to apply/revert from prefab.\n- After editing an instantiated prefab with `BehaviorGraphAgent`, right clicking on the component and applying prefab overrides may cause an error. A workaround: Click the Overrides dropdown below the Prefab field on the GameObject and select Apply All.\n- During playmode, assigning the same graph to an agent twice from the inspector causes the blackboard values to disappear, and prevents the graph from executing correctly. The solution is to unassign the graph from the component, then reassign it.\n- Creating a new black"
  },
  "upmCi": {
    "footprint": "a8e8755548a0205e86d7b41683d089148cc551e9"
  },
  "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.behavior@1.0/manual/index.html",
  "repository": {
    "url": "https://github.cds.internal.unity3d.com/unity/com.unity.ai.designer-monorepo.git",
    "type": "git",
    "revision": "6e7c9b560d9b63a0bcdb14dc9e5bcaee95f90482"
  },
  "_fingerprint": "fe41d2b9d6fa3e724ed0d869ba2d445acd8ef2ca"
}
